include wali_config.mk

IWASM_DIR := $(ROOT_DIR)/wasm-micro-runtime/product-mini/platforms/linux/build
LIBCXX_BUILD_DIR := $(ROOT_DIR)/libcxx

COMPILE_PARALLEL := 4
LINK_PARALLEL := 1

.PHONY: default libc libcxx iwasm wali-compiler tests clean clean-iwasm

default: iwasm

all: libc iwasm wali-compiler libcxx tests

iwasm-dir:
	mkdir -p $(IWASM_DIR)

libc:
	make -C wali-musl -j$(COMPILE_PARALLEL)

.ONESHELL:
libcxx: wali-compiler libc
	cmake -S $(LLVM_DIR)/runtimes -B $(LIBCXX_BUILD_DIR) \
		-DLLVM_PARALLEL_COMPILE_JOBS=$(COMPILE_PARALLEL) -DLLVM_PARALLEL_LINK_JOBS=$(LINK_PARALLEL) \
  	-DCMAKE_BUILD_TYPE=Release  \
  	-DCMAKE_C_COMPILER_WORKS=ON \
  	-DCMAKE_CXX_COMPILER_WORKS=ON \
  	-DCMAKE_POSITION_INDEPENDENT_CODE=OFF \
  	-DLLVM_CONFIG_PATH=$(WALI_LLVM_BIN_DIR)/llvm-config \
  	-DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
  	-DCXX_SUPPORTS_CXX11=ON \
  	-DLIBCXX_ENABLE_THREADS:BOOL=ON \
  	-DLIBCXX_HAS_EXTERNAL_THREAD_API:BOOL=OFF \
  	-DLIBCXX_BUILD_EXTERNAL_THREAD_LIBRARY:BOOL=OFF \
  	-DLIBCXX_HAS_WIN32_THREAD_API:BOOL=OFF \
  	-DLLVM_COMPILER_CHECKED=ON \
  	-DLIBCXX_ENABLE_SHARED:BOOL=OFF \
  	-DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY:BOOL=OFF \
  	-DLIBCXX_ENABLE_EXCEPTIONS:BOOL=ON \
  	-DLIBCXX_ENABLE_FILESYSTEM:BOOL=ON \
  	-DLIBCXX_ENABLE_ABI_LINKER_SCRIPT:BOOL=OFF \
  	-DLIBCXX_CXX_ABI=libcxxabi \
  	-DLIBCXX_CXX_ABI_INCLUDE_PATHS=$(WALI_LLVM_BIN_DIR)/../../libcxxabi/include \
  	-DLIBCXX_HAS_MUSL_LIBC:BOOL=ON \
  	-DLIBCXX_ABI_VERSION=2 \
  	-DLIBCXXABI_ENABLE_EXCEPTIONS:BOOL=ON \
  	-DLIBCXXABI_ENABLE_SHARED:BOOL=OFF \
  	-DLIBCXXABI_SILENT_TERMINATE:BOOL=ON \
  	-DLIBCXXABI_ENABLE_THREADS:BOOL=ON \
  	-DLIBCXXABI_HAS_PTHREAD_API:BOOL=ON \
  	-DLIBCXXABI_HAS_EXTERNAL_THREAD_API:BOOL=OFF \
  	-DLIBCXXABI_BUILD_EXTERNAL_THREAD_LIBRARY:BOOL=OFF \
  	-DLIBCXXABI_HAS_WIN32_THREAD_API:BOOL=OFF \
  	-DLIBCXXABI_ENABLE_PIC:BOOL=OFF \
  	-DLIBCXXABI_USE_LLVM_UNWINDER:BOOL=OFF \
  	-DUNIX:BOOL=ON	\
  	--debug-trycompile \
		-DCMAKE_C_COMPILER=$(WALI_CC) -DCMAKE_CXX_COMPILER=$(WALI_CXX) -DCMAKE_LINKER=$(WALI_LD) -DCMAKE_AR=$(WALI_AR) -DCMAKE_RANLIB=$(WALI_RANLIB) \
		-DCMAKE_C_FLAGS="-pthread $(WALI_COMMON_CFLAGS)" \
		-DCMAKE_CXX_FLAGS="-pthread $(WALI_COMMON_CFLAGS)" \
  	-DLLVM_ENABLE_RUNTIMES="libcxx;libcxxabi"
	cd $(LIBCXX_BUILD_DIR)
	make -j$(COMPILE_PARALLEL)


.ONESHELL:
iwasm: iwasm-dir
	cd $(IWASM_DIR)
	cmake -GNinja .. -DCMAKE_BUILD_TYPE=Debug -DWAMR_BUILD_PLATFORM=linux -DWAMR_BUILD_CUSTOM_NAME_SECTION=1 \
		-DWAMR_BUILD_DUMP_CALL_STACK=1 -DWAMR_BUILD_LIB_WASI_THREADS=1 \
		-DWAMR_BUILD_MEMORY_PROFILING=0 -DWAMR_BUILD_LIBC_WALI=1
	ninja
	cd -
	ln -fs $(IWASM_DIR)/iwasm iwasm

.ONESHELL:
wali-compiler:
	cd $(LLVM_DIR)
	cmake -S llvm -B build -G Ninja -DCMAKE_BUILD_TYPE=Release \
		-DLLVM_ENABLE_PROJECTS="lld;clang;lldb" -DLLVM_ENABLE_RUNTIMES=compiler-rt \
		-DLLVM_PARALLEL_COMPILE_JOBS=$(COMPILE_PARALLEL) -DLLVM_PARALLEL_LINK_JOBS=$(LINK_PARALLEL) \
		-DLLVM_USE_LINKER=gold \
		-DLLVM_STATIC_LINK_CXX_STDLIB=ON -DLLVM_STATIC_LINK_CXX_STDLIB=ON \
		-DLLVM_INCLUDE_TESTS=OFF -DLLVM_INCLUDE_UTILS=OFF -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF
	cd build
	ninja
	mkdir -p lib/clang/16/lib/wasi
	cp ../../misc/libclang_rt.builtins-wasm32.a lib/clang/16/lib/
	cp ../../misc/libclang_rt.builtins-wasm32.a lib/clang/16/lib/wasi/

.ONESHELL:
wamr-compiler:
	cd wasm-micro-runtime/wamr-compiler
	./build_llvm.sh
	mkdir -p build && cd build
	cmake -GNinja .. -DWAMR_BUILD_LIBC_WALI=1 -DWAMR_BUILD_GC=0
	ninja


tests: libc
	make -C tests -j8 $(TEST_DIR_ARGS)

clean-iwasm:
	rm -r $(IWASM_DIR)

clean: clean-iwasm
	make -C tests clean $(TEST_DIR_ARGS)
	make -C wali-musl clean
	rm -r $(LIBCXX_BUILD_DIR)
