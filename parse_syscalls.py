from pathlib import Path

#class f(Enum):
#    TIME_PERC = 0
#    SECONDS = 1
#    USECS_PER_CALL = 2
#    CALLS = 3
#    ERRORS = 4
#    SYSCALL = 5
syscall_desc = {
    0: ("read", "Read from file"),
    1: ("write", "Write to file"),
    2: ("open", "Open or create file"),
    3: ("close", "Close file descriptor"),
    4: ("stat", "Information about file"),
    5: ("fstat", "stat but uses fd"),
    6: ("lstat", "stat but for symlink returns link info"),
    7: ("poll", "Wait for event on fd"),
    8: ("lseek", "Set offset of fd"),
    9: ("mmap", "Map files/devices into memory"),
    10: ("mprotect", "Adjust protection on memory region"),
    11: ("munmap", "Unmap files/devices"),
    12: ("brk", "Set process data segment break"),
    13: ("rt_sigaction", "Change action for signal"),
    14: ("rt_sigprocmask", "Get and/or set signal mask of thread"),
    15: ("rt_sigreturn", "Return from signal handler and clean stack frame"),
    16: ("ioctl", "Set parameters of device files"),
    17: ("pread64", "Read from file at offset"),
    18: ("pwrite64", "Write to file at offset"),
    19: ("readv", "Read from file/device into multiple buffers"),
    20: ("writev", "Write to file/device from multiple buffers"),
    21: ("access", "Checks if process can access file path"),
    22: ("pipe", "Create pipe"),
    23: ("select", "Wait for fd to become ready for IO"),
    24: ("sched_yield", "Yield CPU time back to kernel"),
    25: ("mremap", "Shrink/Enlarge memory region"),
    26: ("msync", ""),
    27: ("mincore", ""),
    28: ("madvise", "Advise kernel how to use memory segment"),
    29: ("shmget", ""),
    30: ("shmat", ""),
    31: ("shmctl", ""),
    32: ("dup", "Duplicate file descriptor"),
    33: ("dup2", "Duplicate with provided new fd"),
    34: ("pause", ""),
    35: ("nanosleep", ""),
    36: ("getitimer", ""),
    37: ("alarm", "Generate SIGALRM"),
    38: ("setitimer", ""),
    39: ("getpid", "Get process ID of calling process"),
    40: ("sendfile", ""),
    41: ("socket", "Create socket"),
    42: ("connect", "Socket connect"),
    43: ("accept", "Accept socket connection"),
    44: ("sendto", "Send message on socket"),
    45: ("recvfrom", "Receive message from socket"),
    46: ("sendmsg", "Send message+additional data to socket"),
    47: ("recvmsg", "Send message+additional data from socket"),
    48: ("shutdown", ""),
    49: ("bind", "Socket bind"),
    50: ("listen", ""),
    51: ("getsockname", "Get socket name"),
    52: ("getpeername", "Get name of connect peer socket"),
    53: ("socketpair", ""),
    54: ("setsockopt", "Set socket options"),
    55: ("getsockopt", "Get current socket options"),
    56: ("clone", "Create child process"),
    57: ("fork", "Create child process"),
    58: ("vfork", "Create child process without copying page tables of parent"),
    59: ("execve", "Execute program"),
    60: ("exit", "Terminate calling process"),
    61: ("wait4", "Wait for process to change state"),
    62: ("kill", "Send signal to process"),
    63: ("uname", "Get kernel info"),
    64: ("semget", ""),
    65: ("semop", ""),
    66: ("semctl", ""),
    67: ("shmdt", ""),
    68: ("msgget", ""),
    69: ("msgsnd", ""),
    70: ("msgrcv", ""),
    71: ("msgctl", ""),
    72: ("fcntl", "Manipulate fd"),
    73: ("flock", ""),
    74: ("fsync", "Sync file data/metadata in memory to disk. Flushes and completes IO"),
    75: ("fdatasync", ""),
    76: ("truncate", ""),
    77: ("ftruncate", ""),
    78: ("getdents", "Get directory entries"),
    79: ("getcwd", "Get current working directory"),
    80: ("chdir", "Change directory"),
    81: ("fchdir", ""),
    82: ("rename", ""),
    83: ("mkdir", "Make directory"),
    84: ("rmdir", ""),
    85: ("creat", ""),
    86: ("link", ""),
    87: ("unlink", "Remove a file"),
    88: ("symlink", "Create symlink"),
    89: ("readlink", "Return name of symlink"),
    90: ("chmod", "Set permissions on file/device"),
    91: ("fchmod", "chmod but uses fd"),
    92: ("chown", "Change file owner"),
    93: ("fchown", "chown but uses fd"),
    94: ("lchown", ""),
    95: ("umask", "Set mask to create files"),
    96: ("gettimeofday", ""),
    97: ("getrlimit", ""),
    98: ("getrusage", "Obtain resource usage"),
    99: ("sysinfo", "Return system information"),
    100: ("times", ""),
    101: ("ptrace", ""),
    102: ("getuid", "Get user ID of process"),
    103: ("syslog", ""),
    104: ("getgid", "Get group ID of process"),
    105: ("setuid", "Set user ID of process"),
    106: ("setgid", "Set group ID of process"),
    107: ("geteuid", "Get effective UID of process"),
    108: ("getegid", " Get effecitve GID of process"),
    109: ("setpgid", ""),
    110: ("getppid", "Get PID for a process"),
    111: ("getpgrp", "Get process group ID of calling process"),
    112: ("setsid", ""),
    113: ("setreuid", ""),
    114: ("setregid", ""),
    115: ("getgroups", ""),
    116: ("setgroups", ""),
    117: ("setresuid", ""),
    118: ("getresuid", ""),
    119: ("setresgid", ""),
    120: ("getresgid", ""),
    121: ("getpgid", ""),
    122: ("setfsuid", ""),
    123: ("setfsgid", ""),
    124: ("getsid", ""),
    125: ("capget", ""),
    126: ("capset", ""),
    127: ("rt_sigpending", ""),
    128: ("rt_sigtimedwait", ""),
    129: ("rt_sigqueueinfo", ""),
    130: ("rt_sigsuspend", "Wait for signal"),
    131: ("sigaltstack", "Set/get signal stack context"),
    132: ("utime", "Change last access and mod time of file"),
    133: ("mknod", ""),
    134: ("useli", ""),
    135: ("personality", ""),
    136: ("ustat", ""),
    137: ("statfs", "Get filesystem stats"),
    138: ("fstatfs", "statfs but uses fd"),
    139: ("sysfs", ""),
    140: ("getpriority", ""),
    141: ("setpriority", ""),
    142: ("sched_setparam", ""),
    143: ("sched_getparam", ""),
    144: ("sched_setscheduler", ""),
    145: ("sched_getscheduler", ""),
    146: ("sched_get_priority_max", ""),
    147: ("sched_get_priority_min", ""),
    148: ("sched_rr_get_interval", ""),
    149: ("mlock", ""),
    150: ("munlock", ""),
    151: ("mlockall", ""),
    152: ("munlockall", ""),
    153: ("vhangup", ""),
    154: ("modify_ldt", ""),
    155: ("pivot_root", ""),
    156: ("_sysctl", ""),
    157: ("prctl", "Operations on process/thread"),
    158: ("arch_prctl", "Set Architecture specific thread state"),
    159: ("adjtimex", ""),
    160: ("setrlimit", ""),
    161: ("chroot", ""),
    162: ("sync", ""),
    163: ("acct", ""),
    164: ("settimeofday", ""),
    165: ("mount", ""),
    166: ("umount2", ""),
    167: ("swapon", ""),
    168: ("swapoff", ""),
    169: ("reboot", ""),
    170: ("sethostname", ""),
    171: ("setdomainname", ""),
    172: ("iopl", ""),
    173: ("ioperm", ""),
    174: ("create_module", ""),
    175: ("init_module", ""),
    176: ("delete_module", ""),
    177: ("get_kernel_syms", ""),
    178: ("query_module", ""),
    179: ("quotactl", ""),
    180: ("nfsservctl", ""),
    181: ("getpmsg", ""),
    182: ("putpmsg", ""),
    183: ("afs_syscall", ""),
    184: ("tuxcall", ""),
    185: ("security", ""),
    186: ("gettid", "Get thread ID of calling process"),
    187: ("readahead", ""),
    188: ("setxattr", ""),
    189: ("lsetxattr", ""),
    190: ("fsetxattr", ""),
    191: ("getxattr", ""),
    192: ("lgetxattr", ""),
    193: ("fgetxattr", ""),
    194: ("listxattr", ""),
    195: ("llistxattr", ""),
    196: ("flistxattr", ""),
    197: ("removexattr", ""),
    198: ("lremovexattr", ""),
    199: ("fremovexattr", ""),
    200: ("tkill", ""),
    201: ("time", ""),
    202: ("futex", "Fast user-space mutex"),
    203: ("sched_setaffinity", "Set CPU affinity mask"),
    204: ("sched_getaffinity", "Get CPU affinity mask"),
    205: ("set_thread_area", ""),
    206: ("io_setup", ""),
    207: ("io_destroy", ""),
    208: ("io_getevents", ""),
    209: ("io_submit", ""),
    210: ("io_cancel", ""),
    211: ("get_thread_area", ""),
    212: ("lookup_dcookie", ""),
    213: ("epoll_create", ""),
    214: ("epoll_ctl_old", ""),
    215: ("epoll_wait_old", ""),
    216: ("remap_file_pages", ""),
    217: ("getdents64", ""),
    218: ("set_tid_address", "Set pointer to TID"),
    219: ("restart_syscall", ""),
    220: ("semtimedop", ""),
    221: ("fadvise64", "Declare access pattern of I/O for optimization"),
    222: ("timer_create", "Create POSIX per-process timer"),
    223: ("timer_settime", "Arm/disarm timer"),
    224: ("timer_gettime", "Get time until expiration"),
    225: ("timer_getoverrun", "Get overrun count on timer"),
    226: ("timer_delete", "Delete timer"),
    227: ("clock_settime", "Set time from clock_id"),
    228: ("clock_gettime", "Get time from clock_id"),
    229: ("clock_getres", ""),
    230: ("clock_nanosleep", "High res clock sleep"),
    231: ("exit_group", ""),
    232: ("epoll_wait", ""),
    233: ("epoll_ctl", ""),
    234: ("tgkill", ""),
    235: ("utimes", ""),
    236: ("vserver", ""),
    237: ("mbind", ""),
    238: ("set_mempolicy", "Set default NUMA memory policy for thread/children"),
    239: ("get_mempolicy", "Get NUMA memory policy for thread/children"),
    240: ("mq_open", ""),
    241: ("mq_unlink", ""),
    242: ("mq_timedsend", ""),
    243: ("mq_timedreceive", ""),
    244: ("mq_notify", ""),
    245: ("mq_getsetattr", ""),
    246: ("kexec_load", ""),
    247: ("waitid", ""),
    248: ("add_key", ""),
    249: ("request_key", ""),
    250: ("keyctl", ""),
    251: ("ioprio_set", ""),
    252: ("ioprio_get", ""),
    253: ("inotify_init", ""),
    254: ("inotify_add_watch", ""),
    255: ("inotify_rm_watch", ""),
    256: ("migrate_pages", ""),
    257: ("openat", "Open file relative to directory fd"),
    258: ("mkdirat", ""),
    259: ("mknodat", ""),
    260: ("fchownat", ""),
    261: ("futimesat", ""),
    262: ("newfstatat", "stat, with relative directory path and cwd"),
    263: ("unlinkat", "Delete name and possible file it references"),
    264: ("renameat", ""),
    265: ("linkat", ""),
    266: ("symlinkat", ""),
    267: ("readlinkat", ""),
    268: ("fchmodat", ""),
    269: ("faccessat", "Check user perms for file relative to dir"),
    270: ("pselect6", ""),
    271: ("ppoll", ""),
    272: ("unshare", ""),
    273: ("set_robust_list", "Set list of robust futexes"),
    274: ("get_robust_list", "Get list of robust futexes"),
    275: ("splice", ""),
    276: ("tee", ""),
    277: ("sync_file_range", ""),
    278: ("vmsplice", ""),
    279: ("move_pages", ""),
    280: ("utimensat", "Change timestamp with NS precision"),
    281: ("epoll_pwait", ""),
    282: ("signalfd", ""),
    283: ("timerfd_create", ""),
    284: ("eventfd", "Create fd for event notification"),
    285: ("fallocate", ""),
    286: ("timerfd_settime", ""),
    287: ("timerfd_gettime", ""),
    288: ("accept4", ""),
    289: ("signalfd4", ""),
    290: ("eventfd2", "eventfd without flags"),
    291: ("epoll_create1", ""),
    292: ("dup3", ""),
    293: ("pipe2", "Same as pipe"),
    294: ("inotify_init1", ""),
    295: ("preadv", ""),
    296: ("pwritev", ""),
    297: ("rt_tgsigqueueinfo", ""),
    298: ("perf_event_open", ""),
    299: ("recvmmsg", ""),
    300: ("fanotify_init", ""),
    301: ("fanotify_mark", ""),
    302: ("prlimit64", "Set and get resource limit"),
    303: ("name_to_handle_at", ""),
    304: ("open_by_handle_at", ""),
    305: ("clock_adjtime", ""),
    306: ("syncfs", ""),
    307: ("sendmmsg", "Send multiple messages via socket"),
    308: ("setns", ""),
    309: ("getcpu", ""),
    310: ("process_vm_readv", ""),
    311: ("process_vm_writev", ""),
    312: ("kcmp", ""),
    313: ("finit_module", ""),
    314: ("sched_setattr", "Set scheduling attributes"),
    315: ("sched_getattr", "Get scheduling attributes"),
    316: ("renameat2", ""),
    317: ("seccomp", ""),
    318: ("getrandom", "Get series of random bytes"),
    319: ("memfd_create", ""),
    320: ("kexec_file_load", ""),
    321: ("bpf", ""),
    322: ("execveat", ""),
    323: ("userfaultfd", ""),
    324: ("membarrier", ""),
    325: ("mlock2", ""),
    326: ("copy_file_range", ""),
    327: ("preadv2", ""),
    328: ("pwritev2", ""),
    329: ("pkey_mprotect", ""),
    330: ("pkey_alloc", ""),
    331: ("pkey_free", ""),
    332: ("statx", ""),
    333: ("io_pgetevents", ""),
    334: ("rseq", "")
}

syscall_nrs = {y[0]: x for x, y in syscall_desc.items()}


def main():
    directory = Path('strace_bench')
    pathlist = directory.glob('*')

    syscall_set = set()
    for path in pathlist:
        with open(path) as f:
            lines = f.readlines()
            split_lines = [x.split() for x in lines]
            start, end = [i for i, line in enumerate(lines) if line.startswith('-----')]
            
            trace = split_lines[start+1 : end]

            syscalls_file = [x[-1] for x in trace]
            syscall_set.update(syscalls_file)

    with open('syscall_list.txt', 'w') as f:
        syscall_list = sorted(syscall_set, key=lambda x: syscall_nrs[x])
        compiled_syscall_desc = [','.join( [str(syscall_nrs[x]), x, syscall_desc[syscall_nrs[x]][1]]) for x in syscall_list]
        f.writelines('\n'.join(compiled_syscall_desc))


if __name__ == '__main__':
    main()
