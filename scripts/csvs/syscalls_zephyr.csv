,name,args
0,adc_channel_setup,"[('const struct device *', 'dev'), ('const struct adc_channel_cfg *', 'channel_cfg')]"
1,adc_read,"[('const struct device *', 'dev'), ('const struct adc_sequence *', 'sequence')]"
2,adc_read_async,"[('const struct device *', 'dev'), ('const struct adc_sequence *', 'sequence'), ('struct k_poll_signal *', 'async')]"
3,atomic_add,"[('atomic_t *', 'target'), ('atomic_val_t', 'value')]"
4,atomic_and,"[('atomic_t *', 'target'), ('atomic_val_t', 'value')]"
5,atomic_cas,"[('atomic_t *', 'target'), ('atomic_val_t', 'old_value'), ('atomic_val_t', 'new_value')]"
6,atomic_nand,"[('atomic_t *', 'target'), ('atomic_val_t', 'value')]"
7,atomic_or,"[('atomic_t *', 'target'), ('atomic_val_t', 'value')]"
8,atomic_ptr_cas,"[('atomic_ptr_t *', 'target'), ('atomic_ptr_val_t', 'old_value'), ('atomic_ptr_val_t', 'new_value')]"
9,atomic_ptr_set,"[('atomic_ptr_t *', 'target'), ('atomic_ptr_val_t', 'value')]"
10,atomic_set,"[('atomic_t *', 'target'), ('atomic_val_t', 'value')]"
11,atomic_sub,"[('atomic_t *', 'target'), ('atomic_val_t', 'value')]"
12,atomic_xor,"[('atomic_t *', 'target'), ('atomic_val_t', 'value')]"
13,auxdisplay_backlight_get,"[('const struct device *', 'dev'), ('uint8_t *', 'backlight')]"
14,auxdisplay_backlight_set,"[('const struct device *', 'dev'), ('uint8_t', 'backlight')]"
15,auxdisplay_brightness_get,"[('const struct device *', 'dev'), ('uint8_t *', 'brightness')]"
16,auxdisplay_brightness_set,"[('const struct device *', 'dev'), ('uint8_t', 'brightness')]"
17,auxdisplay_capabilities_get,"[('const struct device *', 'dev'), ('struct auxdisplay_capabilities *', 'capabilities')]"
18,auxdisplay_clear,"[('const struct device *', 'dev')]"
19,auxdisplay_cursor_position_get,"[('const struct device *', 'dev'), ('int16_t *', 'x'), ('int16_t *', 'y')]"
20,auxdisplay_cursor_position_set,"[('const struct device *', 'dev'), ('enum auxdisplay_position', 'type'), ('int16_t', 'x'), ('int16_t', 'y')]"
21,auxdisplay_cursor_set_enabled,"[('const struct device *', 'dev'), ('bool', 'enabled')]"
22,auxdisplay_cursor_shift_set,"[('const struct device *', 'dev'), ('uint8_t', 'direction'), ('bool', 'display_shift')]"
23,auxdisplay_custom_character_set,"[('const struct device *', 'dev'), ('struct auxdisplay_character *', 'character')]"
24,auxdisplay_custom_command,"[('const struct device *', 'dev'), ('struct auxdisplay_custom_data *', 'data')]"
25,auxdisplay_display_off,"[('const struct device *', 'dev')]"
26,auxdisplay_display_on,"[('const struct device *', 'dev')]"
27,auxdisplay_display_position_get,"[('const struct device *', 'dev'), ('int16_t *', 'x'), ('int16_t *', 'y')]"
28,auxdisplay_display_position_set,"[('const struct device *', 'dev'), ('enum auxdisplay_position', 'type'), ('int16_t', 'x'), ('int16_t', 'y')]"
29,auxdisplay_is_busy,"[('const struct device *', 'dev')]"
30,auxdisplay_position_blinking_set_enabled,"[('const struct device *', 'dev'), ('bool', 'enabled')]"
31,auxdisplay_write,"[('const struct device *', 'dev'), ('const uint8_t *', 'data'), ('uint16_t', 'len')]"
32,bbram_check_invalid,"[('const struct device *', 'dev')]"
33,bbram_check_power,"[('const struct device *', 'dev')]"
34,bbram_check_standby_power,"[('const struct device *', 'dev')]"
35,bbram_get_size,"[('const struct device *', 'dev'), ('size_t *', 'size')]"
36,bbram_read,"[('const struct device *', 'dev'), ('size_t', 'offset'), ('size_t', 'size'), ('uint8_t *', 'data')]"
37,bbram_write,"[('const struct device *', 'dev'), ('size_t', 'offset'), ('size_t', 'size'), ('const uint8_t *', 'data')]"
38,bc12_set_result_cb,"[('const struct device *', 'dev'), ('bc12_callback_t', 'cb'), ('void *', 'user_data')]"
39,bc12_set_role,"[('const struct device *', 'dev'), ('enum bc12_role', 'role')]"
40,can_add_rx_filter_msgq,"[('const struct device *', 'dev'), ('struct k_msgq *', 'msgq'), ('const struct can_filter *', 'filter')]"
41,can_calc_timing,"[('const struct device *', 'dev'), ('struct can_timing *', 'res'), ('uint32_t', 'bitrate'), ('uint16_t', 'sample_pnt')]"
42,can_calc_timing_data,"[('const struct device *', 'dev'), ('struct can_timing *', 'res'), ('uint32_t', 'bitrate'), ('uint16_t', 'sample_pnt')]"
43,can_get_capabilities,"[('const struct device *', 'dev'), ('can_mode_t *', 'cap')]"
44,can_get_core_clock,"[('const struct device *', 'dev'), ('uint32_t *', 'rate')]"
45,can_get_max_bitrate,"[('const struct device *', 'dev'), ('uint32_t *', 'max_bitrate')]"
46,can_get_max_filters,"[('const struct device *', 'dev'), ('bool', 'ide')]"
47,can_get_mode,"[('const struct device *', 'dev')]"
48,can_get_state,"[('const struct device *', 'dev'), ('enum can_state *', 'state'), ('struct can_bus_err_cnt *', 'err_cnt')]"
49,can_get_timing_data_max,"[('const struct device *', 'dev')]"
50,can_get_timing_data_min,"[('const struct device *', 'dev')]"
51,can_get_timing_max,"[('const struct device *', 'dev')]"
52,can_get_timing_min,"[('const struct device *', 'dev')]"
53,can_get_transceiver,"[('const struct device *', 'dev')]"
54,can_recover,"[('const struct device *', 'dev'), ('k_timeout_t', 'timeout')]"
55,can_remove_rx_filter,"[('const struct device *', 'dev'), ('int', 'filter_id')]"
56,can_send,"[('const struct device *', 'dev'), ('const struct can_frame *', 'frame'), ('k_timeout_t', 'timeout'), ('can_tx_callback_t', 'callback'), ('void *', 'user_data')]"
57,can_set_bitrate,"[('const struct device *', 'dev'), ('uint32_t', 'bitrate')]"
58,can_set_bitrate_data,"[('const struct device *', 'dev'), ('uint32_t', 'bitrate_data')]"
59,can_set_mode,"[('const struct device *', 'dev'), ('can_mode_t', 'mode')]"
60,can_set_timing,"[('const struct device *', 'dev'), ('const struct can_timing *', 'timing')]"
61,can_set_timing_data,"[('const struct device *', 'dev'), ('const struct can_timing *', 'timing_data')]"
62,can_start,"[('const struct device *', 'dev')]"
63,can_stats_get_ack_errors,"[('const struct device *', 'dev')]"
64,can_stats_get_bit0_errors,"[('const struct device *', 'dev')]"
65,can_stats_get_bit1_errors,"[('const struct device *', 'dev')]"
66,can_stats_get_bit_errors,"[('const struct device *', 'dev')]"
67,can_stats_get_crc_errors,"[('const struct device *', 'dev')]"
68,can_stats_get_form_errors,"[('const struct device *', 'dev')]"
69,can_stats_get_rx_overruns,"[('const struct device *', 'dev')]"
70,can_stats_get_stuff_errors,"[('const struct device *', 'dev')]"
71,can_stop,"[('const struct device *', 'dev')]"
72,charger_charge_enable,"[('const struct device *', 'dev'), ('const bool', 'enable')]"
73,charger_get_prop,"[('const struct device *', 'dev'), ('const charger_prop_t', 'prop'), ('union charger_propval *', 'val')]"
74,charger_set_prop,"[('const struct device *', 'dev'), ('const charger_prop_t', 'prop'), ('const union charger_propval *', 'val')]"
75,counter_cancel_channel_alarm,"[('const struct device *', 'dev'), ('uint8_t', 'chan_id')]"
76,counter_get_frequency,"[('const struct device *', 'dev')]"
77,counter_get_guard_period,"[('const struct device *', 'dev'), ('uint32_t', 'flags')]"
78,counter_get_max_top_value,"[('const struct device *', 'dev')]"
79,counter_get_num_of_channels,"[('const struct device *', 'dev')]"
80,counter_get_pending_int,"[('const struct device *', 'dev')]"
81,counter_get_top_value,"[('const struct device *', 'dev')]"
82,counter_get_value,"[('const struct device *', 'dev'), ('uint32_t *', 'ticks')]"
83,counter_get_value_64,"[('const struct device *', 'dev'), ('uint64_t *', 'ticks')]"
84,counter_is_counting_up,"[('const struct device *', 'dev')]"
85,counter_set_channel_alarm,"[('const struct device *', 'dev'), ('uint8_t', 'chan_id'), ('const struct counter_alarm_cfg *', 'alarm_cfg')]"
86,counter_set_guard_period,"[('const struct device *', 'dev'), ('uint32_t', 'ticks'), ('uint32_t', 'flags')]"
87,counter_set_top_value,"[('const struct device *', 'dev'), ('const struct counter_top_cfg *', 'cfg')]"
88,counter_start,"[('const struct device *', 'dev')]"
89,counter_stop,"[('const struct device *', 'dev')]"
90,counter_ticks_to_us,"[('const struct device *', 'dev'), ('uint32_t', 'ticks')]"
91,counter_us_to_ticks,"[('const struct device *', 'dev'), ('uint64_t', 'us')]"
92,dac_channel_setup,"[('const struct device *', 'dev'), ('const struct dac_channel_cfg *', 'channel_cfg')]"
93,dac_write_value,"[('const struct device *', 'dev'), ('uint8_t', 'channel'), ('uint32_t', 'value')]"
94,device_get_binding,"[('const char *', 'name')]"
95,device_is_ready,"[('const struct device *', 'dev')]"
96,devmux_select_get,"[('const struct device *', 'dev')]"
97,devmux_select_set,"[('struct device *', 'dev'), ('size_t', 'index')]"
98,dma_chan_filter,"[('const struct device *', 'dev'), ('int', 'channel'), ('void *', 'filter_param')]"
99,dma_release_channel,"[('const struct device *', 'dev'), ('uint32_t', 'channel')]"
100,dma_request_channel,"[('const struct device *', 'dev'), ('void *', 'filter_param')]"
101,dma_resume,"[('const struct device *', 'dev'), ('uint32_t', 'channel')]"
102,dma_start,"[('const struct device *', 'dev'), ('uint32_t', 'channel')]"
103,dma_stop,"[('const struct device *', 'dev'), ('uint32_t', 'channel')]"
104,dma_suspend,"[('const struct device *', 'dev'), ('uint32_t', 'channel')]"
105,eeprom_get_size,"[('const struct device *', 'dev')]"
106,eeprom_read,"[('const struct device *', 'dev'), ('off_t', 'offset'), ('void *', 'data'), ('size_t', 'len')]"
107,eeprom_write,"[('const struct device *', 'dev'), ('off_t', 'offset'), ('const void *', 'data'), ('size_t', 'len')]"
108,emul_fuel_gauge_is_battery_cutoff,"[('const struct emul *', 'target'), ('bool *', 'cutoff')]"
109,emul_fuel_gauge_set_battery_charging,"[('const struct emul *', 'target'), ('uint32_t', 'uV'), ('int', 'uA')]"
110,entropy_get_entropy,"[('const struct device *', 'dev'), ('uint8_t *', 'buffer'), ('uint16_t', 'length')]"
111,espi_config,"[('const struct device *', 'dev'), ('struct espi_cfg *', 'cfg')]"
112,espi_flash_erase,"[('const struct device *', 'dev'), ('struct espi_flash_packet *', 'pckt')]"
113,espi_get_channel_status,"[('const struct device *', 'dev'), ('enum espi_channel', 'ch')]"
114,espi_read_flash,"[('const struct device *', 'dev'), ('struct espi_flash_packet *', 'pckt')]"
115,espi_read_lpc_request,"[('const struct device *', 'dev'), ('enum lpc_peripheral_opcode', 'op'), ('uint32_t *', 'data')]"
116,espi_read_request,"[('const struct device *', 'dev'), ('struct espi_request_packet *', 'req')]"
117,espi_receive_oob,"[('const struct device *', 'dev'), ('struct espi_oob_packet *', 'pckt')]"
118,espi_receive_vwire,"[('const struct device *', 'dev'), ('enum espi_vwire_signal', 'signal'), ('uint8_t *', 'level')]"
119,espi_saf_activate,"[('const struct device *', 'dev')]"
120,espi_saf_config,"[('const struct device *', 'dev'), ('const struct espi_saf_cfg *', 'cfg')]"
121,espi_saf_flash_erase,"[('const struct device *', 'dev'), ('struct espi_saf_packet *', 'pckt')]"
122,espi_saf_flash_read,"[('const struct device *', 'dev'), ('struct espi_saf_packet *', 'pckt')]"
123,espi_saf_flash_unsuccess,"[('const struct device *', 'dev'), ('struct espi_saf_packet *', 'pckt')]"
124,espi_saf_flash_write,"[('const struct device *', 'dev'), ('struct espi_saf_packet *', 'pckt')]"
125,espi_saf_get_channel_status,"[('const struct device *', 'dev')]"
126,espi_saf_set_protection_regions,"[('const struct device *', 'dev'), ('const struct espi_saf_protection *', 'pr')]"
127,espi_send_oob,"[('const struct device *', 'dev'), ('struct espi_oob_packet *', 'pckt')]"
128,espi_send_vwire,"[('const struct device *', 'dev'), ('enum espi_vwire_signal', 'signal'), ('uint8_t', 'level')]"
129,espi_write_flash,"[('const struct device *', 'dev'), ('struct espi_flash_packet *', 'pckt')]"
130,espi_write_lpc_request,"[('const struct device *', 'dev'), ('enum lpc_peripheral_opcode', 'op'), ('uint32_t *', 'data')]"
131,espi_write_request,"[('const struct device *', 'dev'), ('struct espi_request_packet *', 'req')]"
132,flash_erase,"[('const struct device *', 'dev'), ('off_t', 'offset'), ('size_t', 'size')]"
133,flash_ex_op,"[('const struct device *', 'dev'), ('uint16_t', 'code'), ('const uintptr_t', 'in'), ('void *', 'out')]"
134,flash_get_page_count,"[('const struct device *', 'dev')]"
135,flash_get_page_info_by_idx,"[('const struct device *', 'dev'), ('uint32_t', 'page_index'), ('struct flash_pages_info *', 'info')]"
136,flash_get_page_info_by_offs,"[('const struct device *', 'dev'), ('off_t', 'offset'), ('struct flash_pages_info *', 'info')]"
137,flash_get_parameters,"[('const struct device *', 'dev')]"
138,flash_get_write_block_size,"[('const struct device *', 'dev')]"
139,flash_read,"[('const struct device *', 'dev'), ('off_t', 'offset'), ('void *', 'data'), ('size_t', 'len')]"
140,flash_read_jedec_id,"[('const struct device *', 'dev'), ('uint8_t *', 'id')]"
141,flash_sfdp_read,"[('const struct device *', 'dev'), ('off_t', 'offset'), ('void *', 'data'), ('size_t', 'len')]"
142,flash_simulator_get_memory,"[('const struct device *', 'dev'), ('size_t *', 'mock_size')]"
143,flash_write,"[('const struct device *', 'dev'), ('off_t', 'offset'), ('const void *', 'data'), ('size_t', 'len')]"
144,fuel_gauge_battery_cutoff,"[('const struct device *', 'dev')]"
145,fuel_gauge_get_buffer_prop,"[('const struct device *', 'dev'), ('fuel_gauge_prop_t', 'prop_type'), ('void *', 'dst'), ('size_t', 'dst_len')]"
146,fuel_gauge_get_prop,"[('const struct device *', 'dev'), ('fuel_gauge_prop_t', 'prop'), ('union fuel_gauge_prop_val *', 'val')]"
147,fuel_gauge_get_props,"[('const struct device *', 'dev'), ('fuel_gauge_prop_t *', 'props'), ('union fuel_gauge_prop_val *', 'vals'), ('size_t', 'len')]"
148,fuel_gauge_set_prop,"[('const struct device *', 'dev'), ('fuel_gauge_prop_t', 'prop'), ('union fuel_gauge_prop_val', 'val')]"
149,fuel_gauge_set_props,"[('const struct device *', 'dev'), ('fuel_gauge_prop_t *', 'props'), ('union fuel_gauge_prop_val *', 'vals'), ('size_t', 'len')]"
150,gnss_get_enabled_systems,"[('const struct device *', 'dev'), ('gnss_systems_t *', 'systems')]"
151,gnss_get_fix_rate,"[('const struct device *', 'dev'), ('uint32_t *', 'fix_interval_ms')]"
152,gnss_get_navigation_mode,"[('const struct device *', 'dev'), ('enum gnss_navigation_mode *', 'mode')]"
153,gnss_get_periodic_config,"[('const struct device *', 'dev'), ('struct gnss_periodic_config *', 'config')]"
154,gnss_get_supported_systems,"[('const struct device *', 'dev'), ('gnss_systems_t *', 'systems')]"
155,gnss_set_enabled_systems,"[('const struct device *', 'dev'), ('gnss_systems_t', 'systems')]"
156,gnss_set_fix_rate,"[('const struct device *', 'dev'), ('uint32_t', 'fix_interval_ms')]"
157,gnss_set_navigation_mode,"[('const struct device *', 'dev'), ('enum gnss_navigation_mode', 'mode')]"
158,gnss_set_periodic_config,"[('const struct device *', 'dev'), ('const struct gnss_periodic_config *', 'config')]"
159,gpio_get_pending_int,"[('const struct device *', 'dev')]"
160,gpio_pin_configure,"[('const struct device *', 'port'), ('gpio_pin_t', 'pin'), ('gpio_flags_t', 'flags')]"
161,gpio_pin_get_config,"[('const struct device *', 'port'), ('gpio_pin_t', 'pin'), ('gpio_flags_t *', 'flags')]"
162,gpio_pin_interrupt_configure,"[('const struct device *', 'port'), ('gpio_pin_t', 'pin'), ('gpio_flags_t', 'flags')]"
163,gpio_port_clear_bits_raw,"[('const struct device *', 'port'), ('gpio_port_pins_t', 'pins')]"
164,gpio_port_get_direction,"[('const struct device *', 'port'), ('gpio_port_pins_t', 'map'), ('gpio_port_pins_t *', 'inputs'), ('gpio_port_pins_t *', 'outputs')]"
165,gpio_port_get_raw,"[('const struct device *', 'port'), ('gpio_port_value_t *', 'value')]"
166,gpio_port_set_bits_raw,"[('const struct device *', 'port'), ('gpio_port_pins_t', 'pins')]"
167,gpio_port_set_masked_raw,"[('const struct device *', 'port'), ('gpio_port_pins_t', 'mask'), ('gpio_port_value_t', 'value')]"
168,gpio_port_toggle_bits,"[('const struct device *', 'port'), ('gpio_port_pins_t', 'pins')]"
169,hwinfo_clear_reset_cause,[]
170,hwinfo_get_device_id,"[('uint8_t *', 'buffer'), ('size_t', 'length')]"
171,hwinfo_get_reset_cause,"[('uint32_t *', 'cause')]"
172,hwinfo_get_supported_reset_cause,"[('uint32_t *', 'supported')]"
173,hwspinlock_get_max_id,"[('const struct device *', 'dev')]"
174,hwspinlock_lock,"[('const struct device *', 'dev'), ('uint32_t', 'id')]"
175,hwspinlock_trylock,"[('const struct device *', 'dev'), ('uint32_t', 'id')]"
176,hwspinlock_unlock,"[('const struct device *', 'dev'), ('uint32_t', 'id')]"
177,i2c_configure,"[('const struct device *', 'dev'), ('uint32_t', 'dev_config')]"
178,i2c_get_config,"[('const struct device *', 'dev'), ('uint32_t *', 'dev_config')]"
179,i2c_recover_bus,"[('const struct device *', 'dev')]"
180,i2c_target_driver_register,"[('const struct device *', 'dev')]"
181,i2c_target_driver_unregister,"[('const struct device *', 'dev')]"
182,i2c_transfer,"[('const struct device *', 'dev'), ('struct i2c_msg *', 'msgs'), ('uint8_t', 'num_msgs'), ('uint16_t', 'addr')]"
183,i2s_buf_read,"[('const struct device *', 'dev'), ('void *', 'buf'), ('size_t *', 'size')]"
184,i2s_buf_write,"[('const struct device *', 'dev'), ('void *', 'buf'), ('size_t', 'size')]"
185,i2s_configure,"[('const struct device *', 'dev'), ('enum i2s_dir', 'dir'), ('const struct i2s_config *', 'cfg')]"
186,i2s_trigger,"[('const struct device *', 'dev'), ('enum i2s_dir', 'dir'), ('enum i2s_trigger_cmd', 'cmd')]"
187,i3c_do_ccc,"[('const struct device *', 'dev'), ('struct i3c_ccc_payload *', 'payload')]"
188,i3c_transfer,"[('struct i3c_device_desc *', 'target'), ('struct i3c_msg *', 'msgs'), ('uint8_t', 'num_msgs')]"
189,ipm_complete,"[('const struct device *', 'ipmdev')]"
190,ipm_max_data_size_get,"[('const struct device *', 'ipmdev')]"
191,ipm_max_id_val_get,"[('const struct device *', 'ipmdev')]"
192,ipm_send,"[('const struct device *', 'ipmdev'), ('int', 'wait'), ('uint32_t', 'id'), ('const void *', 'data'), ('int', 'size')]"
193,ipm_set_enabled,"[('const struct device *', 'ipmdev'), ('int', 'enable')]"
194,ivshmem_enable_interrupts,"[('const struct device *', 'dev'), ('bool', 'enable')]"
195,ivshmem_get_id,"[('const struct device *', 'dev')]"
196,ivshmem_get_max_peers,"[('const struct device *', 'dev')]"
197,ivshmem_get_mem,"[('const struct device *', 'dev'), ('uintptr_t *', 'memmap')]"
198,ivshmem_get_output_mem_section,"[('const struct device *', 'dev'), ('uint32_t', 'peer_id'), ('uintptr_t *', 'memmap')]"
199,ivshmem_get_protocol,"[('const struct device *', 'dev')]"
200,ivshmem_get_rw_mem_section,"[('const struct device *', 'dev'), ('uintptr_t *', 'memmap')]"
201,ivshmem_get_state,"[('const struct device *', 'dev'), ('uint32_t', 'peer_id')]"
202,ivshmem_get_vectors,"[('const struct device *', 'dev')]"
203,ivshmem_int_peer,"[('const struct device *', 'dev'), ('uint32_t', 'peer_id'), ('uint16_t', 'vector')]"
204,ivshmem_register_handler,"[('const struct device *', 'dev'), ('struct k_poll_signal *', 'signal'), ('uint16_t', 'vector')]"
205,ivshmem_set_state,"[('const struct device *', 'dev'), ('uint32_t', 'state')]"
206,k_busy_wait,"[('uint32_t', 'usec_to_wait')]"
207,k_condvar_broadcast,"[('struct k_condvar *', 'condvar')]"
208,k_condvar_init,"[('struct k_condvar *', 'condvar')]"
209,k_condvar_signal,"[('struct k_condvar *', 'condvar')]"
210,k_condvar_wait,"[('struct k_condvar *', 'condvar'), ('struct k_mutex *', 'mutex'), ('k_timeout_t', 'timeout')]"
211,k_event_clear,"[('struct k_event *', 'event'), ('uint32_t', 'events')]"
212,k_event_init,"[('struct k_event *', 'event')]"
213,k_event_post,"[('struct k_event *', 'event'), ('uint32_t', 'events')]"
214,k_event_set,"[('struct k_event *', 'event'), ('uint32_t', 'events')]"
215,k_event_set_masked,"[('struct k_event *', 'event'), ('uint32_t', 'events'), ('uint32_t', 'events_mask')]"
216,k_event_wait,"[('struct k_event *', 'event'), ('uint32_t', 'events'), ('bool', 'reset'), ('k_timeout_t', 'timeout')]"
217,k_event_wait_all,"[('struct k_event *', 'event'), ('uint32_t', 'events'), ('bool', 'reset'), ('k_timeout_t', 'timeout')]"
218,k_float_disable,"[('struct k_thread *', 'thread')]"
219,k_float_enable,"[('struct k_thread *', 'thread'), ('unsigned int', 'options')]"
220,k_futex_wait,"[('struct k_futex *', 'futex'), ('int', 'expected'), ('k_timeout_t', 'timeout')]"
221,k_futex_wake,"[('struct k_futex *', 'futex'), ('bool', 'wake_all')]"
222,k_is_preempt_thread,[]
223,k_mem_paging_histogram_backing_store_page_in_get,"[('struct k_mem_paging_histogram_t *', 'hist')]"
224,k_mem_paging_histogram_backing_store_page_out_get,"[('struct k_mem_paging_histogram_t *', 'hist')]"
225,k_mem_paging_histogram_eviction_get,"[('struct k_mem_paging_histogram_t *', 'hist')]"
226,k_mem_paging_stats_get,"[('struct k_mem_paging_stats_t *', 'stats')]"
227,k_mem_paging_thread_stats_get,"[('struct k_thread *', 'thread'), ('struct k_mem_paging_stats_t *', 'stats')]"
228,k_msgq_alloc_init,"[('struct k_msgq *', 'msgq'), ('size_t', 'msg_size'), ('uint32_t', 'max_msgs')]"
229,k_msgq_get,"[('struct k_msgq *', 'msgq'), ('void *', 'data'), ('k_timeout_t', 'timeout')]"
230,k_msgq_get_attrs,"[('struct k_msgq *', 'msgq'), ('struct k_msgq_attrs *', 'attrs')]"
231,k_msgq_num_free_get,"[('struct k_msgq *', 'msgq')]"
232,k_msgq_num_used_get,"[('struct k_msgq *', 'msgq')]"
233,k_msgq_peek,"[('struct k_msgq *', 'msgq'), ('void *', 'data')]"
234,k_msgq_peek_at,"[('struct k_msgq *', 'msgq'), ('void *', 'data'), ('uint32_t', 'idx')]"
235,k_msgq_purge,"[('struct k_msgq *', 'msgq')]"
236,k_msgq_put,"[('struct k_msgq *', 'msgq'), ('const void *', 'data'), ('k_timeout_t', 'timeout')]"
237,k_mutex_init,"[('struct k_mutex *', 'mutex')]"
238,k_mutex_lock,"[('struct k_mutex *', 'mutex'), ('k_timeout_t', 'timeout')]"
239,k_mutex_unlock,"[('struct k_mutex *', 'mutex')]"
240,k_object_access_grant,"[('const void *', 'object'), ('struct k_thread *', 'thread')]"
241,k_object_alloc,"[('enum k_objects', 'otype')]"
242,k_object_alloc_size,"[('enum k_objects', 'otype'), ('size_t', 'size')]"
243,k_object_release,"[('const void *', 'object')]"
244,k_pipe_alloc_init,"[('struct k_pipe *', 'pipe'), ('size_t', 'size')]"
245,k_pipe_buffer_flush,"[('struct k_pipe *', 'pipe')]"
246,k_pipe_flush,"[('struct k_pipe *', 'pipe')]"
247,k_pipe_get,"[('struct k_pipe *', 'pipe'), ('void *', 'data'), ('size_t', 'bytes_to_read'), ('size_t *', 'bytes_read'), ('size_t', 'min_xfer'), ('k_timeout_t', 'timeout')]"
248,k_pipe_put,"[('struct k_pipe *', 'pipe'), ('const void *', 'data'), ('size_t', 'bytes_to_write'), ('size_t *', 'bytes_written'), ('size_t', 'min_xfer'), ('k_timeout_t', 'timeout')]"
249,k_pipe_read_avail,"[('struct k_pipe *', 'pipe')]"
250,k_pipe_write_avail,"[('struct k_pipe *', 'pipe')]"
251,k_poll,"[('struct k_poll_event *', 'events'), ('int', 'num_events'), ('k_timeout_t', 'timeout')]"
252,k_poll_signal_check,"[('struct k_poll_signal *', 'sig'), ('unsigned int *', 'signaled'), ('int *', 'result')]"
253,k_poll_signal_init,"[('struct k_poll_signal *', 'sig')]"
254,k_poll_signal_raise,"[('struct k_poll_signal *', 'sig'), ('int', 'result')]"
255,k_poll_signal_reset,"[('struct k_poll_signal *', 'sig')]"
256,k_queue_alloc_append,"[('struct k_queue *', 'queue'), ('void *', 'data')]"
257,k_queue_alloc_prepend,"[('struct k_queue *', 'queue'), ('void *', 'data')]"
258,k_queue_cancel_wait,"[('struct k_queue *', 'queue')]"
259,k_queue_get,"[('struct k_queue *', 'queue'), ('k_timeout_t', 'timeout')]"
260,k_queue_init,"[('struct k_queue *', 'queue')]"
261,k_queue_is_empty,"[('struct k_queue *', 'queue')]"
262,k_queue_peek_head,"[('struct k_queue *', 'queue')]"
263,k_queue_peek_tail,"[('struct k_queue *', 'queue')]"
264,k_sched_current_thread_query,[]
265,k_sem_count_get,"[('struct k_sem *', 'sem')]"
266,k_sem_give,"[('struct k_sem *', 'sem')]"
267,k_sem_init,"[('struct k_sem *', 'sem'), ('unsigned int', 'initial_count'), ('unsigned int', 'limit')]"
268,k_sem_reset,"[('struct k_sem *', 'sem')]"
269,k_sem_take,"[('struct k_sem *', 'sem'), ('k_timeout_t', 'timeout')]"
270,k_sleep,"[('k_timeout_t', 'timeout')]"
271,k_stack_alloc_init,"[('struct k_stack *', 'stack'), ('uint32_t', 'num_entries')]"
272,k_stack_pop,"[('struct k_stack *', 'stack'), ('stack_data_t *', 'data'), ('k_timeout_t', 'timeout')]"
273,k_stack_push,"[('struct k_stack *', 'stack'), ('stack_data_t', 'data')]"
274,k_str_out,"[('char *', 'c'), ('size_t', 'n')]"
275,k_thread_abort,"[('k_tid_t', 'thread')]"
276,k_thread_create,"[('struct k_thread *', 'new_thread'), ('k_thread_stack_t *', 'stack'), ('size_t', 'stack_size'), ('k_thread_entry_t', 'entry'), ('void *', 'p1'), ('void *', 'p2'), ('void *', 'p3'), ('int', 'prio'), ('uint32_t', 'options'), ('k_timeout_t', 'delay')]"
277,k_thread_custom_data_get,[]
278,k_thread_custom_data_set,"[('void *', 'value')]"
279,k_thread_deadline_set,"[('k_tid_t', 'thread'), ('int', 'deadline')]"
280,k_thread_join,"[('struct k_thread *', 'thread'), ('k_timeout_t', 'timeout')]"
281,k_thread_name_copy,"[('k_tid_t', 'thread'), ('char *', 'buf'), ('size_t', 'size')]"
282,k_thread_name_set,"[('k_tid_t', 'thread'), ('const char *', 'str')]"
283,k_thread_priority_get,"[('k_tid_t', 'thread')]"
284,k_thread_priority_set,"[('k_tid_t', 'thread'), ('int', 'prio')]"
285,k_thread_resume,"[('k_tid_t', 'thread')]"
286,k_thread_stack_alloc,"[('size_t', 'size'), ('int', 'flags')]"
287,k_thread_stack_free,"[('k_thread_stack_t *', 'stack')]"
288,k_thread_stack_space_get,"[('const struct k_thread *', 'thread'), ('size_t *', 'unused_ptr')]"
289,k_thread_start,"[('k_tid_t', 'thread')]"
290,k_thread_suspend,"[('k_tid_t', 'thread')]"
291,k_thread_timeout_expires_ticks,"[('const struct k_thread *', 't')]"
292,k_thread_timeout_remaining_ticks,"[('const struct k_thread *', 't')]"
293,k_timer_expires_ticks,"[('const struct k_timer *', 'timer')]"
294,k_timer_remaining_ticks,"[('const struct k_timer *', 'timer')]"
295,k_timer_start,"[('struct k_timer *', 'timer'), ('k_timeout_t', 'duration'), ('k_timeout_t', 'period')]"
296,k_timer_status_get,"[('struct k_timer *', 'timer')]"
297,k_timer_status_sync,"[('struct k_timer *', 'timer')]"
298,k_timer_stop,"[('struct k_timer *', 'timer')]"
299,k_timer_user_data_get,"[('const struct k_timer *', 'timer')]"
300,k_timer_user_data_set,"[('struct k_timer *', 'timer'), ('void *', 'user_data')]"
301,k_uptime_ticks,[]
302,k_usleep,"[('int32_t', 'us')]"
303,k_wakeup,"[('k_tid_t', 'thread')]"
304,k_yield,[]
305,kscan_config,"[('const struct device *', 'dev'), ('kscan_callback_t', 'callback')]"
306,kscan_disable_callback,"[('const struct device *', 'dev')]"
307,kscan_enable_callback,"[('const struct device *', 'dev')]"
308,led_blink,"[('const struct device *', 'dev'), ('uint32_t', 'led'), ('uint32_t', 'delay_on'), ('uint32_t', 'delay_off')]"
309,led_get_info,"[('const struct device *', 'dev'), ('uint32_t', 'led'), ('const struct led_info **', 'info')]"
310,led_off,"[('const struct device *', 'dev'), ('uint32_t', 'led')]"
311,led_on,"[('const struct device *', 'dev'), ('uint32_t', 'led')]"
312,led_set_brightness,"[('const struct device *', 'dev'), ('uint32_t', 'led'), ('uint8_t', 'value')]"
313,led_set_channel,"[('const struct device *', 'dev'), ('uint32_t', 'channel'), ('uint8_t', 'value')]"
314,led_set_color,"[('const struct device *', 'dev'), ('uint32_t', 'led'), ('uint8_t', 'num_colors'), ('const uint8_t *', 'color')]"
315,led_write_channels,"[('const struct device *', 'dev'), ('uint32_t', 'start_channel'), ('uint32_t', 'num_channels'), ('const uint8_t *', 'buf')]"
316,log_buffered_cnt,[]
317,log_filter_set,"[('struct log_backend const *const', 'backend'), ('uint32_t', 'domain_id'), ('int16_t', 'source_id'), ('uint32_t', 'level')]"
318,log_frontend_filter_set,"[('int16_t', 'source_id'), ('uint32_t', 'level')]"
319,log_panic,[]
320,log_process,[]
321,maxim_ds3231_get_syncpoint,"[('const struct device *', 'dev'), ('struct maxim_ds3231_syncpoint *', 'syncpoint')]"
322,maxim_ds3231_req_syncpoint,"[('const struct device *', 'dev'), ('struct k_poll_signal *', 'signal')]"
323,mbox_max_channels_get,"[('const struct device *', 'dev')]"
324,mbox_mtu_get,"[('const struct device *', 'dev')]"
325,mbox_send,"[('const struct mbox_channel *', 'channel'), ('const struct mbox_msg *', 'msg')]"
326,mbox_set_enabled,"[('const struct mbox_channel *', 'channel'), ('bool', 'enable')]"
327,mdio_bus_disable,"[('const struct device *', 'dev')]"
328,mdio_bus_enable,"[('const struct device *', 'dev')]"
329,mdio_read,"[('const struct device *', 'dev'), ('uint8_t', 'prtad'), ('uint8_t', 'regad'), ('uint16_t *', 'data')]"
330,mdio_read_c45,"[('const struct device *', 'dev'), ('uint8_t', 'prtad'), ('uint8_t', 'devad'), ('uint16_t', 'regad'), ('uint16_t *', 'data')]"
331,mdio_write,"[('const struct device *', 'dev'), ('uint8_t', 'prtad'), ('uint8_t', 'regad'), ('uint16_t', 'data')]"
332,mdio_write_c45,"[('const struct device *', 'dev'), ('uint8_t', 'prtad'), ('uint8_t', 'devad'), ('uint16_t', 'regad'), ('uint16_t', 'data')]"
333,net_addr_ntop,"[('sa_family_t', 'family'), ('const void *', 'src'), ('char *', 'dst'), ('size_t', 'size')]"
334,net_addr_pton,"[('sa_family_t', 'family'), ('const char *', 'src'), ('void *', 'dst')]"
335,net_eth_get_ptp_clock_by_index,"[('int', 'index')]"
336,net_if_get_by_index,"[('int', 'index')]"
337,net_if_ipv4_addr_add_by_index,"[('int', 'index'), ('struct in_addr *', 'addr'), ('enum net_addr_type', 'addr_type'), ('uint32_t', 'vlifetime')]"
338,net_if_ipv4_addr_lookup_by_index,"[('const struct in_addr *', 'addr')]"
339,net_if_ipv4_addr_rm_by_index,"[('int', 'index'), ('const struct in_addr *', 'addr')]"
340,net_if_ipv4_set_gw_by_index,"[('int', 'index'), ('const struct in_addr *', 'gw')]"
341,net_if_ipv4_set_netmask_by_index,"[('int', 'index'), ('const struct in_addr *', 'netmask')]"
342,net_if_ipv6_addr_add_by_index,"[('int', 'index'), ('struct in6_addr *', 'addr'), ('enum net_addr_type', 'addr_type'), ('uint32_t', 'vlifetime')]"
343,net_if_ipv6_addr_lookup_by_index,"[('const struct in6_addr *', 'addr')]"
344,net_if_ipv6_addr_rm_by_index,"[('int', 'index'), ('const struct in6_addr *', 'addr')]"
345,net_socket_service_register,"[('const struct net_socket_service_desc *', 'service'), ('struct zsock_pollfd *', 'fds'), ('int', 'len'), ('void *', 'user_data')]"
346,nrf_qspi_nor_xip_enable,"[('const struct device *', 'dev'), ('bool', 'enable')]"
347,peci_config,"[('const struct device *', 'dev'), ('uint32_t', 'bitrate')]"
348,peci_disable,"[('const struct device *', 'dev')]"
349,peci_enable,"[('const struct device *', 'dev')]"
350,peci_transfer,"[('const struct device *', 'dev'), ('struct peci_msg *', 'msg')]"
351,ps2_config,"[('const struct device *', 'dev'), ('ps2_callback_t', 'callback_isr')]"
352,ps2_disable_callback,"[('const struct device *', 'dev')]"
353,ps2_enable_callback,"[('const struct device *', 'dev')]"
354,ps2_read,"[('const struct device *', 'dev'), ('uint8_t *', 'value')]"
355,ps2_write,"[('const struct device *', 'dev'), ('uint8_t', 'value')]"
356,ptp_clock_get,"[('const struct device *', 'dev'), ('struct net_ptp_time *', 'tm')]"
357,pwm_capture_cycles,"[('const struct device *', 'dev'), ('uint32_t', 'channel'), ('pwm_flags_t', 'flags'), ('uint32_t *', 'period'), ('uint32_t *', 'pulse'), ('k_timeout_t', 'timeout')]"
358,pwm_disable_capture,"[('const struct device *', 'dev'), ('uint32_t', 'channel')]"
359,pwm_enable_capture,"[('const struct device *', 'dev'), ('uint32_t', 'channel')]"
360,pwm_get_cycles_per_sec,"[('const struct device *', 'dev'), ('uint32_t', 'channel'), ('uint64_t *', 'cycles')]"
361,pwm_set_cycles,"[('const struct device *', 'dev'), ('uint32_t', 'channel'), ('uint32_t', 'period'), ('uint32_t', 'pulse'), ('pwm_flags_t', 'flags')]"
362,reset_line_assert,"[('const struct device *', 'dev'), ('uint32_t', 'id')]"
363,reset_line_deassert,"[('const struct device *', 'dev'), ('uint32_t', 'id')]"
364,reset_line_toggle,"[('const struct device *', 'dev'), ('uint32_t', 'id')]"
365,reset_status,"[('const struct device *', 'dev'), ('uint32_t', 'id'), ('uint8_t *', 'status')]"
366,retained_mem_clear,"[('const struct device *', 'dev')]"
367,retained_mem_read,"[('const struct device *', 'dev'), ('off_t', 'offset'), ('uint8_t *', 'buffer'), ('size_t', 'size')]"
368,retained_mem_size,"[('const struct device *', 'dev')]"
369,retained_mem_write,"[('const struct device *', 'dev'), ('off_t', 'offset'), ('const uint8_t *', 'buffer'), ('size_t', 'size')]"
370,rtc_alarm_get_supported_fields,"[('const struct device *', 'dev'), ('uint16_t', 'id'), ('uint16_t *', 'mask')]"
371,rtc_alarm_get_time,"[('const struct device *', 'dev'), ('uint16_t', 'id'), ('uint16_t *', 'mask'), ('struct rtc_time *', 'timeptr')]"
372,rtc_alarm_is_pending,"[('const struct device *', 'dev'), ('uint16_t', 'id')]"
373,rtc_alarm_set_callback,"[('const struct device *', 'dev'), ('uint16_t', 'id'), ('rtc_alarm_callback', 'callback'), ('void *', 'user_data')]"
374,rtc_alarm_set_time,"[('const struct device *', 'dev'), ('uint16_t', 'id'), ('uint16_t', 'mask'), ('const struct rtc_time *', 'timeptr')]"
375,rtc_get_calibration,"[('const struct device *', 'dev'), ('int32_t *', 'calibration')]"
376,rtc_get_time,"[('const struct device *', 'dev'), ('struct rtc_time *', 'timeptr')]"
377,rtc_set_calibration,"[('const struct device *', 'dev'), ('int32_t', 'calibration')]"
378,rtc_set_time,"[('const struct device *', 'dev'), ('const struct rtc_time *', 'timeptr')]"
379,rtc_update_set_callback,"[('const struct device *', 'dev'), ('rtc_update_callback', 'callback'), ('void *', 'user_data')]"
380,rtio_cqe_copy_out,"[('struct rtio *', 'r'), ('struct rtio_cqe *', 'cqes'), ('size_t', 'cqe_count'), ('k_timeout_t', 'timeout')]"
381,rtio_cqe_get_mempool_buffer,"[('const struct rtio *', 'r'), ('struct rtio_cqe *', 'cqe'), ('uint8_t **', 'buff'), ('uint32_t *', 'buff_len')]"
382,rtio_release_buffer,"[('struct rtio *', 'r'), ('void *', 'buff'), ('uint32_t', 'buff_len')]"
383,rtio_sqe_cancel,"[('struct rtio_sqe *', 'sqe')]"
384,rtio_sqe_copy_in_get_handles,"[('struct rtio *', 'r'), ('const struct rtio_sqe *', 'sqes'), ('struct rtio_sqe **', 'handle'), ('size_t', 'sqe_count')]"
385,rtio_submit,"[('struct rtio *', 'r'), ('uint32_t', 'wait_count')]"
386,sdhc_card_busy,"[('const struct device *', 'dev')]"
387,sdhc_card_present,"[('const struct device *', 'dev')]"
388,sdhc_disable_interrupt,"[('const struct device *', 'dev'), ('int', 'sources')]"
389,sdhc_enable_interrupt,"[('const struct device *', 'dev'), ('sdhc_interrupt_cb_t', 'callback'), ('int', 'sources'), ('void *', 'user_data')]"
390,sdhc_execute_tuning,"[('const struct device *', 'dev')]"
391,sdhc_get_host_props,"[('const struct device *', 'dev'), ('struct sdhc_host_props *', 'props')]"
392,sdhc_hw_reset,"[('const struct device *', 'dev')]"
393,sdhc_request,"[('const struct device *', 'dev'), ('struct sdhc_command *', 'cmd'), ('struct sdhc_data *', 'data')]"
394,sdhc_set_io,"[('const struct device *', 'dev'), ('struct sdhc_io *', 'io')]"
395,sensor_attr_get,"[('const struct device *', 'dev'), ('enum sensor_channel', 'chan'), ('enum sensor_attribute', 'attr'), ('struct sensor_value *', 'val')]"
396,sensor_attr_set,"[('const struct device *', 'dev'), ('enum sensor_channel', 'chan'), ('enum sensor_attribute', 'attr'), ('const struct sensor_value *', 'val')]"
397,sensor_channel_get,"[('const struct device *', 'dev'), ('enum sensor_channel', 'chan'), ('struct sensor_value *', 'val')]"
398,sensor_get_decoder,"[('const struct device *', 'dev'), ('const struct sensor_decoder_api **', 'decoder')]"
399,sensor_reconfigure_read_iodev,"[('struct rtio_iodev *', 'iodev'), ('const struct device *', 'sensor'), ('const enum sensor_channel *', 'channels'), ('size_t', 'num_channels')]"
400,sensor_sample_fetch,"[('const struct device *', 'dev')]"
401,sensor_sample_fetch_chan,"[('const struct device *', 'dev'), ('enum sensor_channel', 'type')]"
402,sip_supervisory_call,"[('const struct device *', 'dev'), ('unsigned long', 'function_id'), ('unsigned long', 'arg0'), ('unsigned long', 'arg1'), ('unsigned long', 'arg2'), ('unsigned long', 'arg3'), ('unsigned long', 'arg4'), ('unsigned long', 'arg5'), ('unsigned long', 'arg6'), ('struct arm_smccc_res *', 'res')]"
403,sip_svc_plat_async_res_req,"[('const struct device *', 'dev'), ('unsigned long *', 'a0'), ('unsigned long *', 'a1'), ('unsigned long *', 'a2'), ('unsigned long *', 'a3'), ('unsigned long *', 'a4'), ('unsigned long *', 'a5'), ('unsigned long *', 'a6'), ('unsigned long *', 'a7'), ('char *', 'buf'), ('size_t', 'size')]"
404,sip_svc_plat_async_res_res,"[('const struct device *', 'dev'), ('struct arm_smccc_res *', 'res'), ('char *', 'buf'), ('size_t *', 'size'), ('uint32_t *', 'trans_id')]"
405,sip_svc_plat_format_trans_id,"[('const struct device *', 'dev'), ('uint32_t', 'client_idx'), ('uint32_t', 'trans_idx')]"
406,sip_svc_plat_free_async_memory,"[('const struct device *', 'dev'), ('struct sip_svc_request *', 'request')]"
407,sip_svc_plat_func_id_valid,"[('const struct device *', 'dev'), ('uint32_t', 'command'), ('uint32_t', 'func_id')]"
408,sip_svc_plat_get_error_code,"[('const struct device *', 'dev'), ('struct arm_smccc_res *', 'res')]"
409,sip_svc_plat_get_trans_idx,"[('const struct device *', 'dev'), ('uint32_t', 'trans_id')]"
410,sip_svc_plat_update_trans_id,"[('const struct device *', 'dev'), ('struct sip_svc_request *', 'request'), ('uint32_t', 'trans_id')]"
411,smbus_block_pcall,"[('const struct device *', 'dev'), ('uint16_t', 'addr'), ('uint8_t', 'cmd'), ('uint8_t', 'snd_count'), ('uint8_t *', 'snd_buf'), ('uint8_t *', 'rcv_count'), ('uint8_t *', 'rcv_buf')]"
412,smbus_block_read,"[('const struct device *', 'dev'), ('uint16_t', 'addr'), ('uint8_t', 'cmd'), ('uint8_t *', 'count'), ('uint8_t *', 'buf')]"
413,smbus_block_write,"[('const struct device *', 'dev'), ('uint16_t', 'addr'), ('uint8_t', 'cmd'), ('uint8_t', 'count'), ('uint8_t *', 'buf')]"
414,smbus_byte_data_read,"[('const struct device *', 'dev'), ('uint16_t', 'addr'), ('uint8_t', 'cmd'), ('uint8_t *', 'byte')]"
415,smbus_byte_data_write,"[('const struct device *', 'dev'), ('uint16_t', 'addr'), ('uint8_t', 'cmd'), ('uint8_t', 'byte')]"
416,smbus_byte_read,"[('const struct device *', 'dev'), ('uint16_t', 'addr'), ('uint8_t *', 'byte')]"
417,smbus_byte_write,"[('const struct device *', 'dev'), ('uint16_t', 'addr'), ('uint8_t', 'byte')]"
418,smbus_configure,"[('const struct device *', 'dev'), ('uint32_t', 'dev_config')]"
419,smbus_get_config,"[('const struct device *', 'dev'), ('uint32_t *', 'dev_config')]"
420,smbus_host_notify_remove_cb,"[('const struct device *', 'dev'), ('struct smbus_callback *', 'cb')]"
421,smbus_pcall,"[('const struct device *', 'dev'), ('uint16_t', 'addr'), ('uint8_t', 'cmd'), ('uint16_t', 'send_word'), ('uint16_t *', 'recv_word')]"
422,smbus_quick,"[('const struct device *', 'dev'), ('uint16_t', 'addr'), ('enum smbus_direction', 'direction')]"
423,smbus_smbalert_remove_cb,"[('const struct device *', 'dev'), ('struct smbus_callback *', 'cb')]"
424,smbus_word_data_read,"[('const struct device *', 'dev'), ('uint16_t', 'addr'), ('uint8_t', 'cmd'), ('uint16_t *', 'word')]"
425,smbus_word_data_write,"[('const struct device *', 'dev'), ('uint16_t', 'addr'), ('uint8_t', 'cmd'), ('uint16_t', 'word')]"
426,spi_release,"[('const struct device *', 'dev'), ('const struct spi_config *', 'config')]"
427,spi_transceive,"[('const struct device *', 'dev'), ('const struct spi_config *', 'config'), ('const struct spi_buf_set *', 'tx_bufs'), ('const struct spi_buf_set *', 'rx_bufs')]"
428,sys_cache_data_flush_and_invd_range,"[('void *', 'addr'), ('size_t', 'size')]"
429,sys_cache_data_flush_range,"[('void *', 'addr'), ('size_t', 'size')]"
430,sys_cache_data_invd_range,"[('void *', 'addr'), ('size_t', 'size')]"
431,sys_clock_hw_cycles_per_sec_runtime_get,[]
432,sys_csrand_get,"[('void *', 'dst'), ('size_t', 'len')]"
433,sys_rand32_get,[]
434,sys_rand_get,"[('void *', 'dst'), ('size_t', 'len')]"
435,syscon_get_base,"[('const struct device *', 'dev'), ('uintptr_t *', 'addr')]"
436,syscon_get_size,"[('const struct device *', 'dev'), ('size_t *', 'size')]"
437,syscon_read_reg,"[('const struct device *', 'dev'), ('uint16_t', 'reg'), ('uint32_t *', 'val')]"
438,syscon_write_reg,"[('const struct device *', 'dev'), ('uint16_t', 'reg'), ('uint32_t', 'val')]"
439,tgpio_pin_config_ext_timestamp,"[('const struct device *', 'dev'), ('uint32_t', 'pin'), ('uint32_t', 'event_polarity')]"
440,tgpio_pin_disable,"[('const struct device *', 'dev'), ('uint32_t', 'pin')]"
441,tgpio_pin_periodic_output,"[('const struct device *', 'dev'), ('uint32_t', 'pin'), ('uint64_t', 'start_time'), ('uint64_t', 'repeat_interval'), ('bool', 'periodic_enable')]"
442,tgpio_pin_read_ts_ec,"[('const struct device *', 'dev'), ('uint32_t', 'pin'), ('uint64_t *', 'timestamp'), ('uint64_t *', 'event_count')]"
443,tgpio_port_get_cycles_per_second,"[('const struct device *', 'dev'), ('uint32_t *', 'cycles')]"
444,tgpio_port_get_time,"[('const struct device *', 'dev'), ('uint64_t *', 'current_time')]"
445,uart_config_get,"[('const struct device *', 'dev'), ('struct uart_config *', 'cfg')]"
446,uart_configure,"[('const struct device *', 'dev'), ('const struct uart_config *', 'cfg')]"
447,uart_drv_cmd,"[('const struct device *', 'dev'), ('uint32_t', 'cmd'), ('uint32_t', 'p')]"
448,uart_err_check,"[('const struct device *', 'dev')]"
449,uart_irq_err_disable,"[('const struct device *', 'dev')]"
450,uart_irq_err_enable,"[('const struct device *', 'dev')]"
451,uart_irq_is_pending,"[('const struct device *', 'dev')]"
452,uart_irq_rx_disable,"[('const struct device *', 'dev')]"
453,uart_irq_rx_enable,"[('const struct device *', 'dev')]"
454,uart_irq_tx_disable,"[('const struct device *', 'dev')]"
455,uart_irq_tx_enable,"[('const struct device *', 'dev')]"
456,uart_irq_update,"[('const struct device *', 'dev')]"
457,uart_line_ctrl_get,"[('const struct device *', 'dev'), ('uint32_t', 'ctrl'), ('uint32_t *', 'val')]"
458,uart_line_ctrl_set,"[('const struct device *', 'dev'), ('uint32_t', 'ctrl'), ('uint32_t', 'val')]"
459,uart_mux_find,"[('int', 'dlci_address')]"
460,uart_poll_in,"[('const struct device *', 'dev'), ('unsigned char *', 'p_char')]"
461,uart_poll_in_u16,"[('const struct device *', 'dev'), ('uint16_t *', 'p_u16')]"
462,uart_poll_out,"[('const struct device *', 'dev'), ('unsigned char', 'out_char')]"
463,uart_poll_out_u16,"[('const struct device *', 'dev'), ('uint16_t', 'out_u16')]"
464,uart_rx_disable,"[('const struct device *', 'dev')]"
465,uart_rx_enable,"[('const struct device *', 'dev'), ('uint8_t *', 'buf'), ('size_t', 'len'), ('int32_t', 'timeout')]"
466,uart_rx_enable_u16,"[('const struct device *', 'dev'), ('uint16_t *', 'buf'), ('size_t', 'len'), ('int32_t', 'timeout')]"
467,uart_tx,"[('const struct device *', 'dev'), ('const uint8_t *', 'buf'), ('size_t', 'len'), ('int32_t', 'timeout')]"
468,uart_tx_abort,"[('const struct device *', 'dev')]"
469,uart_tx_u16,"[('const struct device *', 'dev'), ('const uint16_t *', 'buf'), ('size_t', 'len'), ('int32_t', 'timeout')]"
470,updatehub_autohandler,[]
471,updatehub_confirm,[]
472,updatehub_probe,[]
473,updatehub_reboot,[]
474,updatehub_update,[]
475,user_fault,"[('unsigned int', 'reason')]"
476,w1_change_bus_lock,"[('const struct device *', 'dev'), ('bool', 'lock')]"
477,w1_configure,"[('const struct device *', 'dev'), ('enum w1_settings_type', 'type'), ('uint32_t', 'value')]"
478,w1_get_slave_count,"[('const struct device *', 'dev')]"
479,w1_read_bit,"[('const struct device *', 'dev')]"
480,w1_read_block,"[('const struct device *', 'dev'), ('uint8_t *', 'buffer'), ('size_t', 'len')]"
481,w1_read_byte,"[('const struct device *', 'dev')]"
482,w1_reset_bus,"[('const struct device *', 'dev')]"
483,w1_search_bus,"[('const struct device *', 'dev'), ('uint8_t', 'command'), ('uint8_t', 'family'), ('w1_search_callback_t', 'callback'), ('void *', 'user_data')]"
484,w1_write_bit,"[('const struct device *', 'dev'), ('const bool', 'bit')]"
485,w1_write_block,"[('const struct device *', 'dev'), ('const uint8_t *', 'buffer'), ('size_t', 'len')]"
486,w1_write_byte,"[('const struct device *', 'dev'), ('uint8_t', 'byte')]"
487,wdt_disable,"[('const struct device *', 'dev')]"
488,wdt_feed,"[('const struct device *', 'dev'), ('int', 'channel_id')]"
489,wdt_setup,"[('const struct device *', 'dev'), ('uint8_t', 'options')]"
490,xtensa_user_fault,"[('unsigned int', 'reason')]"
491,z_errno,[]
492,z_log_msg_simple_create_0,"[('const void *', 'source'), ('uint32_t', 'level'), ('const char *', 'fmt')]"
493,z_log_msg_simple_create_1,"[('const void *', 'source'), ('uint32_t', 'level'), ('const char *', 'fmt'), ('uint32_t', 'arg')]"
494,z_log_msg_simple_create_2,"[('const void *', 'source'), ('uint32_t', 'level'), ('const char *', 'fmt'), ('uint32_t', 'arg0'), ('uint32_t', 'arg1')]"
495,z_log_msg_static_create,"[('const void *', 'source'), ('const struct log_msg_desc', 'desc'), ('uint8_t *', 'package'), ('const void *', 'data')]"
496,z_sys_mutex_kernel_lock,"[('struct sys_mutex *', 'mutex'), ('k_timeout_t', 'timeout')]"
497,z_sys_mutex_kernel_unlock,"[('struct sys_mutex *', 'mutex')]"
498,z_zsock_getaddrinfo_internal,"[('const char *', 'host'), ('const char *', 'service'), ('const struct zsock_addrinfo *', 'hints'), ('struct zsock_addrinfo *', 'res')]"
499,zephyr_fputc,"[('int', 'c'), ('FILE *', 'stream')]"
500,zephyr_fwrite,"[('const void *ZRESTRICT', 'ptr'), ('size_t', 'size'), ('size_t', 'nitems'), ('FILE *ZRESTRICT', 'stream')]"
501,zephyr_read_stdin,"[('char *', 'buf'), ('int', 'nbytes')]"
502,zephyr_write_stdout,"[('const void *', 'buf'), ('int', 'nbytes')]"
503,zsock_accept,"[('int', 'sock'), ('struct sockaddr *', 'addr'), ('socklen_t *', 'addrlen')]"
504,zsock_bind,"[('int', 'sock'), ('const struct sockaddr *', 'addr'), ('socklen_t', 'addrlen')]"
505,zsock_close,"[('int', 'sock')]"
506,zsock_connect,"[('int', 'sock'), ('const struct sockaddr *', 'addr'), ('socklen_t', 'addrlen')]"
507,zsock_fcntl,"[('int', 'sock'), ('int', 'cmd'), ('int', 'flags')]"
508,zsock_get_context_object,"[('int', 'sock')]"
509,zsock_gethostname,"[('char *', 'buf'), ('size_t', 'len')]"
510,zsock_getpeername,"[('int', 'sock'), ('struct sockaddr *', 'addr'), ('socklen_t *', 'addrlen')]"
511,zsock_getsockname,"[('int', 'sock'), ('struct sockaddr *', 'addr'), ('socklen_t *', 'addrlen')]"
512,zsock_getsockopt,"[('int', 'sock'), ('int', 'level'), ('int', 'optname'), ('void *', 'optval'), ('socklen_t *', 'optlen')]"
513,zsock_inet_pton,"[('sa_family_t', 'family'), ('const char *', 'src'), ('void *', 'dst')]"
514,zsock_ioctl,"[('int', 'sock'), ('unsigned long', 'request'), ('va_list', 'ap')]"
515,zsock_listen,"[('int', 'sock'), ('int', 'backlog')]"
516,zsock_poll,"[('struct zsock_pollfd *', 'fds'), ('int', 'nfds'), ('int', 'timeout')]"
517,zsock_recvfrom,"[('int', 'sock'), ('void *', 'buf'), ('size_t', 'max_len'), ('int', 'flags'), ('struct sockaddr *', 'src_addr'), ('socklen_t *', 'addrlen')]"
518,zsock_recvmsg,"[('int', 'sock'), ('struct msghdr *', 'msg'), ('int', 'flags')]"
519,zsock_select,"[('int', 'nfds'), ('zsock_fd_set *', 'readfds'), ('zsock_fd_set *', 'writefds'), ('zsock_fd_set *', 'exceptfds'), ('struct zsock_timeval *', 'timeout')]"
520,zsock_sendmsg,"[('int', 'sock'), ('const struct msghdr *', 'msg'), ('int', 'flags')]"
521,zsock_sendto,"[('int', 'sock'), ('const void *', 'buf'), ('size_t', 'len'), ('int', 'flags'), ('const struct sockaddr *', 'dest_addr'), ('socklen_t', 'addrlen')]"
522,zsock_setsockopt,"[('int', 'sock'), ('int', 'level'), ('int', 'optname'), ('const void *', 'optval'), ('socklen_t', 'optlen')]"
523,zsock_shutdown,"[('int', 'sock'), ('int', 'how')]"
524,zsock_socket,"[('int', 'family'), ('int', 'type'), ('int', 'proto')]"
525,zsock_socketpair,"[('int', 'family'), ('int', 'type'), ('int', 'proto'), ('int *', 'sv')]"
526,__posix_clock_get_base,"[('clockid_t', 'clock_id'), ('struct timespec *', 'ts')]"
